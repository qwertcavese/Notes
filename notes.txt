       
  JAVASCRIPT:-     
       
       
       
        ARRAY:-
                array index starts from 0
                 eg:-var arry=[1,55,2,5,5];
        now in given array "arry" 1 has index zero and 55 has index two ans so on.

        //////////////////////////////////////////////////////////////////////////////////////////////////////


        MAP:-
                element of map is written in curly brackets
                eg:-var map1={name:a,age:b};
                now here "name" is a key and "a" is value and elements of map can be called by value
                i.e if we write map1.name we will get "a".
                if map is made in array then also map has to be called by its key.

         eg2:- var arry=[{name:a,age:b,status:false},{salary:q,address:t,status:true}];
                now here the following map is in array "arry" so here "{name:a,age:b,status:false}" is fully zero index for array and it is also
                fully one element for map respectively, Also here any one of the key of one element respresents as all
                i.e if we say status==false it means it will consider full zero index. 



                NOTE:-NODE JS IS COMPULSARY TO INSTALL AS REACT JS IS BASED ON IT

        //////////////////////////////////////////////////////////////////////////////////////////////////////



        API:-
                api is client between server ans user
                we can read,post,update and delete api through storing it on our personal server
                api is in format of json(javascript object notation) which is a universal accepted fromat od data
                to create our on server

                step1:-create on json file with extension .json
                step2:-create array in map in json file
                        eg:-{
                                "id":[]
                         }
                step3:-now open cmd and access json file with "cd 'foldername' "
                step4:-now write "npx json-server <-json file name-> "
                step:-it will give address of local host which is our file address



        TO REFERSH PAGE:-
        
                syntax:-
                        windows.location.reload(true);              

                 by default its value is false


       //////////////////////////////////////////////////////////////////////////////////////////////////////


Window:-now "window" is a inbuilt method which selects our window i.e our screen
              so if we say "window.location.reload(true)" means our window will reload or say our
              screen/page etc will reload

              now window has many inbuilt methods and here are some exapmples

                     syntax:-
                            windows.location.reload(true);                           (it reloads page so code will execute again)
                                   
                            window.location.href="<-name of page we want to redirect->"  (it will redirect user to page mentioned)

                            window.innerWidth      (target width of windows)

                            window.innerHeight      (target height of windows)

        //////////////////////////////////////////////////////////////////////////////////////////////////////

navigator:-
        as "window" refers to our "screen" i.e "BOM" similary "navigator" refers to our device;
        that is it gives information of "wifi,bluetooth,os" etc 


        //////////////////////////////////////////////////////////////////////////////////////////////////////

QuerSelector:-
        querySelector is just like document.getElementById(") but here difference it that ,with queryselector 
        we can directly access class and id both ,we dont have to specify document.getElementById/classname(").

                syntax:-
                        document.querySelector("<-name of class or id with there selector i.e "." and "#"->")

        eg:- lets say we have two paragraph tag 

                <p id="p1">hello</p>
                <p class="p2">hello</p>

        so if we want data of first paragraph tag then we have to write,

                document.querySelector("#p1")

        
        
        similarly for second tag

                document.querySelector(".p2")

        
        
        now say we want to select both together then we can select like this way,

                document.querySelectorAll("p")  (now here we have written "p" as a tag name and not with reference to
                                                        classname or id)

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

css manipulation with DOM:-
        Now DOM (document object model) refers to "document.getElementById/classname" and all etc
        lets say we want to add and remove some classes in html on "onclick" event ,then we can do
        it through DOM;

                for eg:- <h1 class="header1">hello</h1>

                        now we want to add new class say "header2" than we can do it with js logic through
                        DOM

                        syntax:-document.querySelector(".header1").classList.add("header2")

                        (this above method will add on more to "h1" tag as we have used inbuilt function
                                ".add()" and then we can use internal or external css on "header2" )

                        
                        
                        similarly, to remove class

                        syntax:-document.querySelector(".header1").classList.remove("header2")

                        (this will remove class from our selected class which is "header1" in tag "h1")

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

addEventListner:-
        It is method which passes two parameters ,one is event and second is function

        eg:- we have button and we want to perform event on it

                <button id="btn">click me</button>

                now if we want to add event "onclick" and call function namely "add1()" so according
                to first method we can do like this way  
        
                <button id="btn" onclick="add1()">click me</button>

                
                we can do same think with addEventListner method by this way

                syntax:-
                        var btnclick=document.querySelector("#btn");  (here first we have target button with its id)
                        btnclick.addEventListner("click","add1()") (here "click" is event in reference to onclick
                                                                        and "add1()" is function)


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

Objects:-      
         Now object is inbuilt data structure which has "key:value" pair format which means it has keys and values
        syntax:
                var xyz={"id":"hello","age":18,"salary":150000}
                now here object "xyz" has keys id,age,salary and their values are hello,18,150000 respectively

                now we have to note here that just like array it does not have index so we cannot access it from
                index and if we do not have index so we can say that we cannot apply loop into it too 
                and if we want to access any values from object that we have to access it with key

                for eg:-In above array if we want to access "hello" then we can access it with his key i.e "id"
                        so we can write it in this way

                       syntax:- var z=xyz.id
                                so now here variable z has "hello"

                now we can use loop in object also but it has different methods 

                for eg:- lets sat we have object

                         var xyz={"id":"hello","age":18,"salary":150000}

                         so to apply loop on it we can use one of the methods like:-

                                syntax:- var arry=Objects.values(xyz)    (It will return all values of object xyz to arry in array format)

                                        similarly if we write "keys" instead of "values" it will return all keys in array format
                                        and here we have to note that "Objects" is inbuilt method and "xyz" is name of object

                now let say we have to store any data in object "xyz" so we can do it like this way:-

                        synatx:-xyz["phone"]=123
                                        (this will add one more object in "xyz" whose key is "phone" and value is "123")

                to delete,

                        synatx:-delete xyz["id"]
                                        (it will delete key "id" and his value "hello")


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////


Onchange Event:- 
        now just like "onclick" "Onchange" is also event as "onclick" triggers on clicking any button of html page
        "onchage" triggers when wwe make any changes in "inputfield".
        In easy terms if we type anything on keyboard then on pressing of each key we change state of our word
        for eg:-If we want to write "hello"
        then we can say that from "h" to "he" state changes similarly state will keep changing till we type
        so here we can say that state form "h" changes to "he" "hel" "hell" "hello" etc and so on


        now if we want to use onchange we can use it like this way
        lets say we have input field of type text so we will use onchange in following way in react js


                                syntax:-
                                        const[data,setdata]=useState(")
                                        eg:-<input type="text" value={data} onchage={(e)=>{
                                                setdata(e.target.value)
                                        }} /> 

                                now first we have used useState hook which passes on function and on variable and then
                                we have connected "data" with input type so now this input has become in controlled 
                                form and we can't anything in it till we changes state through "onchage" 
                                and after that we have stored "e.target.value" in "setdata" so whatever we will 
                                write will be stored in "data" and we can used it 

                                now let's see have we are able store value in "data" as state changes
                                first we have used "onchange" event which has "arrow" function which passes
                                "e" as parameter so whatever we will type in keyboard it will stored one by one in
                                "e" and it will store in useState hook because we have used 
                                "e.target.value" which means "e" is letters type in keyboard "target" is on which we have used 
                                "onchange" i.e input box and "value" means value we write inside input box

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
        
ternary operator:-
        ternary operator is used to simplify "if else" condition

        lets take example that we want if else condition that whether value is "5" or not
        then normally we will write this way

                syntax:-        
                        var value=5;
                        if(value==5){
                                return console.log("true")
                        }
                        else{
                                return console.log("false")
                        }

        now we can write same code in single line with ternary operator

                synatx:-
                        var value=5;
                        var a= return value==5 ? console.log("true") : console.log("false) ;

        now in given above code if value is 5 than a will get "true" else "false"

        now "return" is mandatory to use while using ternary operator

        here lets understand synatx of code

                first before "?" we will write condition and if condition will be true than
                code before ":" will be executed else code after ":" will be executed
        
        
        
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

functions:-
        now if we want some piece of code to use repeteadly then rather than writting it everytime we can store it in
        functions and functions are not executed directly it is executed only when it is called

                                syntax:- function xyz(){
                                        console.log("hello")
                                }
                                xyz();

                                now here we can se that have make function namely "xyz" and we have called it afterward
                                i.e "xyz()" so it will be executed and wherever we will call this function we will get 
                                output "hello" in console

                here is one more type of function namely arrow function

                                syntax:- var xyz=()=>{
                                        console.log("hello")
                                }

                                this is also function whose name is xyz
 


        Callback functions:-
                callback functions are those functions which are executed without calling then and we use it inside functions and it doesnot
                have names

                        synatx:- function abc(function(
                                 console.log("hello")
                        ))

                        here we have make callback function inside function "abc" if we call "abc" function like this way
                        "abc()" then function inside it will akso called automatically

                        we san also use arrow function as callback

                        syntax:-function abc(()=>{
                                console.log("hello")
                        })
                        here we have used arrow function inside function "abc"


        
         now we can pass parameters also in functions

                        eg:-function xyz(a){
                                return console.log(a);
                        }

                        xyz("hello")

                        now here we can see that we have declared variable "a" directly inside function "xyz" and it is 
                        known as parameter and we have assigned value to "a" upon calling a function 
                        i.e "hello" which is known as argument so this function will print "hello" in console
                        and we have also use "return" keyword inside it which means it will return us what
                        we have written in it 

                        now we have to note that whatever we write in function but it will only return
                        us that what we have written in "return"
 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            
session/local Storage:-
        sessionStorage and localStorage is used to store data on browser.difference is that
        sessionStorage stores data till the session is not ever i.e till the browser is not closed 
        and localStorage stores data life time.

        synatx to remove,get and set data in storages

                synatx:-
                        sessionStorage.setItem("<--key-->","<--value-->")              (to set item)
                        sessionStorage.removeItem("<--key of data which we want to remove -->")       (to remove item)
                        sessionStorage.getItem("<--key of data which we want to get -->")       (to get item)

                similarly for localStorage

                synatx:-
                        synatx:-
                        localStorage.setItem("<--key-->","<--value-->")              (to set item)
                        localStorage.removeItem("<--key of data which we want to remove -->")       (to remove item)
                        localStorage.getItem("<--key of data which we want to get -->")       (to get item)

                eg:-
                        sessionStorage.setItem("name","sujay)          (set data)
                        sessionStorage.getItem("name")                 (gives data i.e "sujay" in this case)
                        sessionStorage.removeItem("name")              (removes data)

        similar for local storage also


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
cookies:-
        cookies also stores data but it also stores it server and we ran remove it whenever we want        
        
        synatx:-
                (to make cookies)
                document.cookie="name=sujay"    (name is key and sujay is value)
        
                (to delete it whenever we want)
                document.cookie="name=sujay; expires=<--date and time format-->"

                (to access or get cookies)
                var x=document.cookie;  (it will store all cookies in "x")

                (to update cookies)
                 document.cookie="name=sujay,xyz,abc" (update cookies)
        
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
Async/Await and Try/Catch:-
        Now first we will understand try/catch,Try/Catch is method where we write code in try and if  
        any errors come in try block then it will directly go to catch block which catches
        errors

                syntax:-
                        try{
                                (code we want to execute)
                                return (what we want to return)
                        }
                        catch(error){
                                console.log(error)
                        }

        if any error comes in try{} block than from the part of code where we get error from that
        part it will go to catch


        Now, Async/Await.It is a method which is used when function is asyncronise which means
        it takes some time to return or say it is not definite so we have to use await also
        It is mostly used in api calling
        Await makes the code wait till the all the process is not completed

                syntax:-
                        async function z(){
                                const apiData=await axios.get(<-link of api->)
                                return apiData        (it will return apiData )
                        }
                
        and in similar code if we use try/catch also

                syntax will be like this way:-
                        try{
                               const response= z();           (it will call function z() where we have called api
                                                                and returned apiData so it will be returned to
                                                                response here )
                        }
                        catch(err){
                                console.log(error)
                        }
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
Template Literal:-
        it is one of the method of printing anything or say to access valu easily if in some cases we are not
        able to access value from any variable than we can us Template Literal

                syntax:-
                        `${<--variable name-->}`    (Now it not invertes commas it is backtick located under "esc" key in keyboard)
        
        eg:-lets say we have to do sum and print it in log

                var num1=5;
                var num2=5;
                var result=num1+num2;
                console.log("the ans of" +num1+ "and" +num2+ "is" +result)

        Now, by using template Literal

                var num1=5;
                var num2=5;
                var result=num1+num2;
                console.log(`the ans of ${num1} and ${num2} is ${result}`)
        
        as "num1" "num2" and "result" have values we will write it inside curly brackets and use "$" before
        and we will get same ans as above
        
        
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
 setInterval and setTimeout:-
        It is a method which runs code in time we have prescribed it takes two parameters
        one is "function" and other is "time" is "ms" 
        the only difference is that setTimeout runs one time and setInterval runs continuously
        after every described time lapse

                syntax:-
                        setTimeout(()=>{
                                <--code we want to execute-->           (5000 means 5000ms that is 5 seconds)
                        },5000)       
        
        similarly for setInterval

                syntax:-
                        setInterval(()=>{
                                <--code we want to execute-->           (5000 means 5000ms that is 5 seconds)
                        },5000)       
        
        now lets say we want to clear setTimeout or setInterval then we can do that also
        but first we have to store this function in variable

        for setTimeout
                synatx:-
                        var timer=setTimeout(()=>{
                                <--code we want to execute-->           (5000 means 5000ms that is 5 seconds)
                        },5000)  

                        clearTimeout(timer)  (as we have store setTimeout in var "timer" that we can use it for clearTimeout)

        similarly for setInterval

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
 onmousemove and onkeydown event:-
        onmousemove:-Triggers when we move mouse or say curson
        onkeydown:-Triggers when we press any key on keyboard

                        onmousemove syntax:-
                                window.addEventListener("mousemove",()=>{
                                        <--code we want to execute-->
                                })

        
                        onmousemove syntax:-
                                window.addEventListener("keydown",(e)=>{
                                        if(e) resetTimer();
                                })

                        (here we have took "e" as parameter because "e" represents key pressed on keyboard
                        and key pressed will be passed to "e" of arrow function whose parameter we have 
                        kept "e")




        (here we have used window because window represents whole screen of our device and we want 
        to addEventListener on it)
        

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////
        
Spread Operator:-
        spread operator is ES6 i.e an advance and convient way of performing some functions in js
        and spread operator is one of it.It copies old data of array and adds new array along with it

        now lets say we have an array and we have to push something in it then we have push
        method and also we can use spread operator

        eg:-
                First normal,

                syntax:-
                        var arry=[1,2,5,3]
                        arry.push(8)   (it will push 8 to arry and return us modified arry)

                this same thing can be done like this way;

                syntax:-
                        var arry=[1,2,5,3]
                        var newNum=8;
                        
                        arry=[...arry,newNum]

                        
                        now here first "...arry" will copy all data of "arry" in assigned variable   
                        i.e "arry" and then it will also add "newNum" afterward if we will add one 
                        more value to "arry" than now "arry" already has "8" so it will copy it also
                        and then it will store new value which we will insert
        

        spread operator also works on Objects

                synatx:-
                        var obj={id:1,name:"sujay"}

                        var z={...obj}          (Now "z" is also object with same data of "obj")


                
                now lets say we want to add new data to object then we can do it thid way,

                        syntax:-
                                var z={...obj,age:15}   (It will "age:15" in "z" but not in "obj")
        
                
                
                now if we wanted to update data of object than also same way
                        
                         syntax:-
                                var z={...obj,id:10}   (It will update "id" from "1" to "10")







        ///////////////////////////////////////////////////////////////////////////////////////////////////////////

OOPS:-
        oops in object oriented programing which means object which has key and value now
        js is scripting language so we can use oops inside by creating class 
        Now, whats the importance of class, so we can say that it makes code to using less 
        memory and one of the best feature is that we can store one than more value in
        one variable at a time

        now lets say we have class "abc" so inside it we have to make global variable
        but it is not possible in js so we use "this" keyword which means
        that here "this" refers to its object we have connected it with or if it is not connected 
        with any any class than it refers to its parent class

        syntax:-
                class abc{
                        constructor(v){
                                this.value=v;
                                this.x=1;
                                console.log(this.value)
                        }
                }

                var obj=new abc(5)


        now here we have made one class name abc and we have make constructor inside it
        which means now constructor have two values one is "value" and another is "x"

        now "this." makes variable global so now that variable can be used inside class "abc"
        anywhere and we have given "v" parameter to constructor and than we have connected
        it with global variable "value"

        class cannot be directly accessed anywhere ,first we have to make object of it
        so we have make its object named "obj" 



                syntax to make object of class:-
                        var <-object name->=new <-class name->


        "new" keyword refers to making of new object of class we want

        so if we want tho access "value" outside class so we can access it like this way

                syntax:-
                        var obj=new abc(5);
                        var b=obj.value;

                        similary

                        var c=obj.x;         (returs "1" beacuse "x" has value "1")


       also as said that class can store two value at a time so here we can say that class
       name "abc" have constructor of two variables "value" and "x" as we will acces it with 
       object "obj". "obj" can store two value one is "obj.value" and another is "obj.x"

       now as said that ".this" refers object as well make a global variable so we can use it 
       without class also

        for eg:-lets say if we make any function with parameter "x" but to use "x" outside
        function we have to make global variable and then we have to store "x" of function 
        to global variable but with the help of ".this" keyword we can directly use it
        outside the function

                syntax:-
                        function sum1(v){
                                this.value=v;
                        } 
                        sum1(5)
                        console.log(this.value) (it will give us 5 as we have pass it in parameter and then made it global)

        if we want to do it without ".this" method than we can do it like this way

                syntax:-
                        var value=0;
                         function sum1(v){
                                value=v;
                        } 
                        sum1(5)
                        console.log(value) 
                        
                        
---------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x


react js:-
        at first we need to create our own app to use react so, in cmd write following thing
        step1:-npm create-react-app "app name"
        step2:-after app is created go in app file and write
                npm start
                it will open our private development server

        all the javascript code in react in written in inbuilt function name "app"
        ans all the html code in written in "return" inside the empty brackets known as fragements
        "<></>". this is because "return" can only retun one thing at a time but here if is written 
        inside fragements then it can return full code.
        Also react works with DOM which means we do not refresh full page we refresh
        only components
        components means different jsx files which we export and then it can be used in 
        different files by importing it 

                code to export:-export default <-function name->
                code to import;-import <-function name-> from <-./foldername/jsx filename or component name->

        now it is mandatory to keep both component file name and function name first letter capital
        
        In easy word we can say jsx file and functions inside it together makes component

        to call components
                
                code:-<-function name/-> (which is usually termed as component)

        //////////////////////////////////////////////////////////////////////////////////////////////////////

        REACT-ROUTER-DOM:-
                it provides us the service to play with router domain i.e "https/localhost3000"
                As it is a library first we have to install it so in cmd we will write commant
                 
                        code:-npm i react-router-domain

                now in our app we have app.js,index.js and follwing files so ,
                in index.js we have to import BrowserRouter library and also from index.js we have to remove
                
                 <React.Strict-mode>
                        <App/>
                 </React.Strict-mode>

                        and add,

                <BrowserRouter>
                        <App/>
                 </BrowserRouter>     

                now to play with components first make different components and then as we have call 
                all the component in index.js we will import that components in app.js  

                for eg:-
                        <Routes>
                           <Route path='/about' element={<About1/>}/>
                        </Routes>
                
                here as soon as "/about" is added after "https/localhost3000" we will redirect tp about page

                
                
        NavLink:-
                now navlink is part of react-router-dom in which onclick of that link we will automatic navigate to clicked 
                components
                lets say we click on "home" then it will navigate to home page 

                        syntax:-
                                <NavLink to="<-path (for eg:-"/about")->">about</NavLink>

                                so onclicking about, address will automatically add "/about" after "https/localhost3000"
                                and it will become "https/localhost3000/about", so from that automatically 
                                route will be called and we will redirect at about page



        Navigator:-
                navigator is also part of react-router-dom and it is different from navlink as in navlink we navigate through
                text but if we want to navigate onclicking button than we can use navigator
                now first we should have to define routes which we have already mentioned above
                then,

                        syntax:-
                                var <-name of variable->=useNavigate();

                                so for eg:-

                                var z=useNavigate();
                                z("/about")

                now in any button if we make arrow function and write z("/about") we will redirect 
                to about page or component

                Navigate can also pass data along with it to the component we navigate

                lets say we have to navigate to "/about" component and pass some data
                so following syntax is to be follwed

                        syntax:-
                                var a=5;     (it is data we want to pass)
                                var navigate=usenavigate();

                                navigate("/about",{
                                        state:a;
                                })

                now navigate has inbuilt object of name "state" so data will be passed
                in "about" component in object so to use that data first we have to get it
                and the dta send through navigate is accessed theough "useLocation()"

                        syntax:-
                                const z=useLocation();

                                var x=z.state   (data is passed in object format and we have stored it in "x")


        ////////////////////////////////////////////////////////////////////////////////////////////////////

HOC/wrapper function:-
        high order component or wrapper function is method in which one component is wrapped or placed inside
        another component it is used when we have to use any code so many times ,
        so we can make component of that code and then wrap another components inside it
        now wrapper function and inbuilt key named "children" which stores html/rendering code
        of wrapped component

            eg:-lets say component "A" has code which we have to use many times so we and lets take assumption
                that we have to use it in component "B"

                        syntax:-
                                import "A" from '../components/WrapperA'   (name of component)

                                function B(){

                                      return  (
                                        <A>
                                        (code of "B" component)
                                        </A>
                                        )
                                }


                                         ( And in "A" component)

                                
                                
                                function A(props){
                                        return(
                                                {props.children}        (it will render all data of component "B")
                                        )
                                }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        AXIOS:-
                axios is inbuilt method just like react-router-dom to fetch api and ti also update,delete
                and push api,so similarly like all other library first we have to install It

                        code in cmd :-npm i react-axios


                similary we also have to import axios in app.js file
                how to use axios:-

                        code:-axios.get("api link")
                                .then((parameter)=>{setdata(parameter.key)}) (here key means key of map{}) 
                
                now here for eg lets assume
                        const[data,setdata]=useState([]);
                        where,
                        data is parameter and setdata is function

                        so we have store api data in setdata function because api gives
                        data in map format so to print it we will use "useState"
                        so, now data can also access api so we will write

                        {data.map((value)=>{
                                return(
                                        <>
                                        <tr><td>value.<-key of map-></td></td>
                                        </>
                                )
                        })}

                        now here,
                        data.map is inbuilt property with array which returns value one by one
                        and it is not map{} format so we store it in different parameter and then 
                        print it.
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////


        props:-
                now if we want to pass any value or data from one component to another component
                than we use props
                now let say we want to pass data from app.jsx and do changes in display.jsx

                then,
                here we want to pass value of a to Display.jsx but it will be displayed in App.jsx by
                calling component
                        syntax:-
                                function App(){

                                var a=10
                                }
                                return(
                                        <>
                                                <Display value={a}/>  (value is a key which passes data of var a)
                                        </>
                                )


                                (now as a display is receiver first we have to write props)
                                function Display(props){
                                        var z=props.value (here "z" contains data of a which is 10 so,
                                                            we have stored it in "z" through props which is receiver
                                                            of data and value is giver of data which is "a")
                                        return(
                                                <>
                                                        <p>{z}</p>
                                                </>
                                        )
                                }

                now here we have to note the process that how it works as when we pass data to Display.jsx 
                first it will take data and then Display.jsx will updates its content and than as Display.jsx 
                is already called in App.jsx so we will able to see data which we have passed through props

        ////////////////////////////////////////////////////////////////////////////////////////////////////


        useRef():-
                useRef is also hook and it is used to give reference of the element we want to connect
                in simple words if want to connect input field than rather than using DOM syntax
                we can connect it with useRef 
                here point is to be note tha useRef returns object whose key is current
                so if we want to perform any event on useRef connected element than it can 
                be used through ".current" keyword as it is key

                for eg we have to connect inputfield with useRef than,

                        synatx:-
                                const inputField=useRef()

                                <input type="text"
                                ref={inputField}                (name of our variable)
                                /> 

                so now it is connected with our "inputField" and we can perform 
                add any addEventListner to "input" with the help of "useRef()"
                here if we log "inputField"
                it will show whole "input" and lets sy we have to use it to get value

                so it can be done like this
                        
                        synatx:-
                                inputField.current.value    (because useRef() returns object with default key "current")

-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x


Git/Github:-
        (git works on terminal/cmd)
        we use git to so that group projects are made easy as it is easily accessible by everyone
        In git we create repositries which can be public and private.
        At first we have to install git to our system
        if we do any changes in git it will show in our github account
        now here we have to note that first we will do changes in our local machine and then
        we will push that file to github account
        so,

                
                
                **THIS PROCESS WILL BE DONE WHEN WE MAKING CHANGES IN EXISTING REPO**


        first:-we have to configure git so git can do changes in our github account
                (done only one time when created new account )
                                step1:-git config --global user.name <-our github account username->
                                step2:-git config --global user.email <-our github account email->

                
                CLONE & STATUS
        
        clone:-cloning a repository on our local machine/our system because we have to make changes
                in existing code present already in repository so first we will clone and then make 
                changes in it
                                code:-git clone <-link of repository->

                we can see hidden fies in terminal through
                                code:-dir /ah
                        where, 
                        ah:-all hidden files
                now if we see that .git named file is present in our folder means we will able to make 
                changes in repository through git
        
        status:-display the status of code
                                code:-git status


        if we do not do changes on local machine than status will show "branch is up to date"
        if we do changes in our existing file than status will show "modified:"file name" "
        if we make new file than status will show "untracked files"(these are those files which are note cloned from folder but made new by us in our local machine)

        now after modifying and creating new files we need to add those changes to git statging area 
        then commit it
        after adding and commit we have to push it to git(push from local to global)

                                        
                                        
                                         ADD & COMMIT

        add:-add new or changed files to our working directory to the git staging area
                               
                                code:-git add <-file name->
                                        or
                                code:-git add . (if we want to add all files at once)
                        
       
        commit:-It is a record of changed
                               
                                code:-git commit -m "message"
                                where,
                                -m stands for message



                                        
                                        PUSH
        
        after add and commit we need to push means upload local repo content to remote repo/global repo

                                code:-git push origin main



     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           

                
                
                 **IF WE ARE MAKING NEW REPO WE WILL FOLLOW FOLLOWING PROCESS**

        when we create new folder in our local machine then first we have to initialise git in our folder
        first go to that  folder using cd <-folder name-> then,

         
                                code:-git init (it will initialise git in our folder)
        
        then,we need to add new remote beacuse we are pushing in different repo

                                code:-git remote add origin <-link of our new repo-> (here origin refers to name of our remote repo)
                                                (in easy language to give path to our local repo of remote repo)
                                code:-git remote -v ( to verify our remote repo)


                                                                
                                                                BRANCH

                                code:-git branch (shows in which branch we are)

       
        we should rename branch name our create new branch
        

                                code:-git branch -M <-branch name that want-> (it changes branch name)
                                        where,
                                        M=new name of branch

        
        now we will push local repo to remote repo in reqiured branch

                                code:-git push -u origin main
                                        where,
                                        -u refers to upstream which means if we want to push all files in same branch then we will use "-u" once and then by default everytime it will take same branch
                                        origin refers to remote remo name
                                        main refes to our branch name (it can be different)


        some branch commands,

                                code:-git branch (to check branch)
                                code:-git branch -M <-branch name-> (to rename branch)
                                code:-git checkout <-branch name-> (to navigate branch)
                                code:-git checkout -b <-branch name-> (to create new branch)
                                code:-git branch -d <-branch name-> (to delete branch)

                                now eg:-if we want to push anything to branch name sujay then,
                                        step1:-git init
                                        step2:-git remote add origin <-new repo link->
                                        step3:-git add .
                                        step4:-git commit -m "<-any message->"
                                        step5:-git checkout -b sujay
                                        step6:-git push origin sujay
                                         
-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x

Vite+React :-
        vite + react app is another method of making react app with additional configuration of vite app
        with it

        syntax:- (In cmd)
                1. npm create vite@latest
                2. (we will get option to keep our project name)
                3. (we will get option to select framework and we will select "react")
                4. cd <-project name/app name->
                5. npm install (node modules will be installed in it)
                6. npm run dev -- --host (this gives us link of both local host and on network react development server)

-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x
CSS:-
        cascading styling sheet is used to style our website
        
                syntax:-
                        lets say we have,
                                
                                <h1 id="id-head" class="class-head">hello</h1>

                        so to style it for id use "#" and for class use "."

                                #id-head{
                                        color:red;
                                }

                                (this is when we want to select element using id)
                                
                                
                                .id-head{
                                        color:red;
                                }

                                (this is when we want to select element using class)


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           


variable in css


                syntax:-
                        :root{
                                --<--variable name-->:<--css property-->;
                        }

                        (we are targeting root and we have to declare var name)

                
                eg:-
                        :root{
                                --a:red;
                        }

                        (now we set color of heading tag)

                        #id-head{
                                color:var(--a);
                        }

                        (this is synatx to use variable,here first we have to write "var()" keyword
                          and then use variable inside it)


     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           


important:-
        "important" keyword is used when we want to use css forcefully

                synatx:-
                        <--selector-->{
                                <--css property--> !important
                        }

                eg:-

                        .id-head{
                                color:red !important;
                        }
