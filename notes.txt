       
  JAVASCRIPT:-     
       
       
       
        ARRAY:-
                array index starts from 0
                 eg:-var arry=[1,55,2,5,5];
        now in given array "arry" 1 has index zero and 55 has index two ans so on.

-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x
        //////////////////////////////////////////////////////////////////////////////////////////////////////


        MAP:-
                element of map is written in curly brackets
                eg:-var map1={name:a,age:b};
                now here "name" is a key and "a" is value and elements of map can be called by value
                i.e if we write map1.name we will get "a".
                if map is made in array then also map has to be called by its key.

         eg2:- var arry=[{name:a,age:b,status:false},{salary:q,address:t,status:true}];
                now here the following map is in array "arry" so here "{name:a,age:b,status:false}" is fully zero index for array and it is also
                fully one element for map respectively, Also here any one of the key of one element respresents as all
                i.e if we say status==false it means it will consider full zero index. 



                NOTE:-NODE JS IS COMPULSARY TO INSTALL AS REACT JS IS BASED ON IT

        //////////////////////////////////////////////////////////////////////////////////////////////////////
-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x


        API:-
                api is client between server ans user
                we can read,post,update and delete api through storing it on our personal server
                api is in format of json(javascript object notation) which is a universal accepted fromat od data
                to create our on server

                step1:-create on json file with extension .json
                step2:-create array in map in json file
                        eg:-{
                                "id":[]
                         }
                step3:-now open cmd and access json file with "cd 'foldername' "
                step4:-now write "npx json-server <-json file name-> "
                step:-it will give address of local host which is our file address



        TO REFERSH PAGE:-
        
                syntax:-
                        windows.location.reload(true);

                 by default its value is false

        //////////////////////////////////////////////////////////////////////////////////////////////////////


-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x


react js:-
        at first we need to create our own app to use react so, in cmd write following thing
        step1:-npm create-react-app "app name"
        step2:-after app is created go in app file and write
                npm start
                it will open our private development server

        all the javascript code in react in written in inbuilt function name "app"
        ans all the html code in written in "return" inside the empty brackets known as fragements
        "<></>". this is because "return" can only retun one thing at a time but here if is written 
        inside fragements then it can return full code.
        Also react works with DOM which means we do not refresh full page we refresh
        only components
        components means different jsx files which we export and then it can be used in 
        different files by importing it 

                code to export:-export default <-function name->
                code to import;-import <-function name-> from <-./foldername/jsx filename or component name->

        now it is mandatory to keep both component file name and function name first letter capital
        
        In easy word we can say jsx file and functions inside it together makes component

        to call components
                
                code:-<-function name/-> (which is usually termed as component)

        //////////////////////////////////////////////////////////////////////////////////////////////////////

        REACT-ROUTER-DOM:-
                it provides us the service to play with router domain i.e "https/localhost3000"
                As it is a library first we have to install it so in cmd we will write commant
                 
                        code:-npm i react-router-domain

                now in our app we have app.js,index.js and follwing files so ,
                in index.js we have to import BrowserRouter library and also from index.js we have to remove
                
                 <React.Strict-mode>
                        <App/>
                 </React.Strict-mode>

                        and add,

                <BrowserRouter>
                        <App/>
                 </BrowserRouter>     

                now to play with components first make different components and then as we have call 
                all the component in index.js we will import that components in app.js  

                for eg:-
                        <Routes>
                        <Route path='/about' Component={About1}/>
                        </Routes>
                
                here as soon as "/about" is added after "https/localhost3000" we will redirect tp about page

                
                
        NavLink:-
                now navlink is part of react-router-dom in which onclick of that link we will automatic navigate to clicked 
                components
                lets say we click on "home" then it will navigate to home page 

                        syntax:-
                                <NavLink to="<-path (for eg:-"/about")->">about</NavLink>

                                so onclicking about, address will automatically add "/about" after "https/localhost3000"
                                and it will become "https/localhost3000/about", so from that automatically 
                                route will be called and we will redirect at about page



        Navigator:-
                navigator is also part of react-router-dom and it is different from navlink as in navlink we navigate through
                text but if we want to navigate onclicking button than we can use navigator
                now first we should have to define routes which we have already mentioned above
                then,

                        syntax:-
                                var <-name of variable->=useNavigate();

                                so for eg:-

                                var z=useNavigate();
                                z("/about")

                now in any button if we make arrow function and write z("/about") we will redirect 
                to about page or component

        ////////////////////////////////////////////////////////////////////////////////////////////////////

        AXIOS:-
                axios is inbuilt method just like react-router-dom to fetch api and ti also update,delete
                and push api,so similarly like all other library first we have to install It

                        code in cmd :-npm i react-axios


                similary we also have to import axios in app.js file
                how to use axios:-

                        code:-axios.get("api link")
                                .then((parameter)=>{setdata(parameter.key)}) (here key means key of map{}) 
                
                now here for eg lets assume
                        const[data,setdata]=useState([]);
                        where,
                        data is parameter and setdata is function

                        so we have store api data in setdata function because api gives
                        data in map format so to print it we will use "useState"
                        so, now data can also access api so we will write

                        {data.map((value)=>{
                                return(
                                        <>
                                        <tr><td>value.<-key of map-></td></td>
                                        </>
                                )
                        })}

                        now here,
                        data.map is inbuilt property with array which returns value one by one
                        and it is not map{} format so we store it in different parameter and then 
                        print it.
        
        ////////////////////////////////////////////////////////////////////////////////////////////////////


        props:-
                now if we want to pass any value or data from one component to another component
                than we use props
                now let say we want to pass data from app.jsx and do changes in display.jsx

                then,
                here we want to pass value of a to Display.jsx but it will be displayed in App.jsx by
                calling component
                        syntax:-
                                function App(){

                                var a=10
                                }
                                return(
                                        <>
                                                <Display value={a}/>  (value is a key which passes data of var a)
                                        </>
                                )


                                (now as a display is receiver first we have to write props)
                                function Display(props){
                                        var z=props.value (here "z" contains data of a which is 10 so,
                                                            we have stored it in "z" through props which is receiver
                                                            of data and value is giver of data which is "a")
                                        return(
                                                <>
                                                        <p>{z}</p>
                                                </>
                                        )
                                }

                now here we have to note the process that how it works as when we pass data to Display.jsx 
                first it will take data and then Display.jsx will updates its content and than as Display.jsx 
                is already called in App.jsx so we will able to see data which we have passed through props

         
-----------------x----------------------x---------------------x-------------------------x--------------------x-------------------------x----------------------------------------------------x------------------------------------------------x


Git/Github:-
        (git works on terminal/cmd)
        we use git to so that group projects are made easy as it is easily accessible by everyone
        In git we create repositries which can be public and private.
        At first we have to install git to our system
        if we do any changes in git it will show in our github account
        now here we have to note that first we will do changes in our local machine and then
        we will push that file to github account
        so,

                
                
                **THIS PROCESS WILL BE DONE WHEN WE MAKING CHANGES IN EXISTING REPO**


        first:-we have to configure git so git can do changes in our github account
                (done only one time when created new account )
                                step1:-git config --global user.name <-our github account username->
                                step2:-git config --global user.email <-our github account email->

                
                CLONE & STATUS
        
        clone:-cloning a repository on our local machine/our system because we have to make changes
                in existing code present already in repository so first we will clone and then make 
                changes in it
                                code:-git clone <-link of repository->

                we can see hidden fies in terminal through
                                code:-dir /ah
                        where, 
                        ah:-all hidden files
                now if we see that .git named file is present in our folder means we will able to make 
                changes in repository through git
        
        status:-display the status of code
                                code:-git status


        if we do not do changes on local machine than status will show "branch is up to date"
        if we do changes in our existing file than status will show "modified:"file name" "
        if we make new file than status will show "untracked files"(these are those files which are note cloned from folder but made new by us in our local machine)

        now after modifying and creating new files we need to add those changes to git statging area 
        then commit it
        after adding and commit we have to push it to git(push from local to global)

                                        
                                        
                                         ADD & COMMIT

        add:-add new or changed files to our working directory to the git staging area
                               
                                code:-git add <-file name->
                                        or
                                code:-git add . (if we want to add all files at once)
                        
       
        commit:-It is a record of changed
                               
                                code:-git commit -m "message"
                                where,
                                -m stands for message



                                        
                                        PUSH
        
        after add and commit we need to push means upload local repo content to remote repo/global repo

                                code:-git push origin main



     //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////           

                
                
                 **IF WE ARE MAKING NEW REPO WE WILL FOLLOW FOLLOWING PROCESS**

        when we create new folder in our local machine then first we have to initialise git in our folder
        first go to that  folder using cd <-folder name-> then,

         
                                code:-git init (it will initialise git in our folder)
        
        then,we need to add new remote beacuse we are pushing in different repo

                                code:-git remote add origin <-link of our new repo-> (here origin refers to name of our remote repo)
                                                (in easy language to give path to our local repo of remote repo)
                                code:-git remote -v ( to verify our remote repo)


                                                                
                                                                BRANCH

                                code:-git branch (shows in which branch we are)

       
        we should rename branch name our create new branch
        

                                code:-git branch -M <-branch name that want-> (it changes branch name)
                                        where,
                                        M=new name of branch

        
        now we will push local repo to remote repo in reqiured branch

                                code:-git push -u origin main
                                        where,
                                        -u refers to upstream which means if we want to push all files in same branch then we will use "-u" once and then by default everytime it will take same branch
                                        origin refers to remote remo name
                                        main refes to our branch name (it can be different)


        some branch commands,

                                code:-git branch (to check branch)
                                code:-git branch -M <-branch name-> (to rename branch)
                                code:-git checkout <-branch name-> (to navigate branch)
                                code:-git checkout -b <-branch name-> (to create new branch)
                                code:-git branch -d <-branch name-> (to delete branch)

                                now eg:-if we want to push anything to branch name sujay then,
                                        step1:-git init
                                        step2:-git remote add origin <-new repo link->
                                        step3:-git add .
                                        step4:-git commit -m "<-any message->"
                                        step5:-git checkout -b sujay
                                        step6:-git push origin sujay
                                         